// Generated by Dagger (https://dagger.dev).
package app.swiftbills.ui.auth.home.invoices;

import app.swiftbills.data.home.CustomersRepository;
import app.swiftbills.data.home.InvoiceRepository;
import app.swiftbills.data.home.MyBusinessRepository;
import app.swiftbills.data.home.TaxRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.QualifierMetadata;
import dagger.internal.ScopeMetadata;
import javax.inject.Provider;

@ScopeMetadata
@QualifierMetadata
@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class InvoicesViewModel_Factory implements Factory<InvoicesViewModel> {
  private final Provider<InvoiceRepository> invoiceRepositoryProvider;

  private final Provider<MyBusinessRepository> businessRepositoryProvider;

  private final Provider<CustomersRepository> customersRepositoryProvider;

  private final Provider<TaxRepository> taxRepositoryProvider;

  public InvoicesViewModel_Factory(Provider<InvoiceRepository> invoiceRepositoryProvider,
      Provider<MyBusinessRepository> businessRepositoryProvider,
      Provider<CustomersRepository> customersRepositoryProvider,
      Provider<TaxRepository> taxRepositoryProvider) {
    this.invoiceRepositoryProvider = invoiceRepositoryProvider;
    this.businessRepositoryProvider = businessRepositoryProvider;
    this.customersRepositoryProvider = customersRepositoryProvider;
    this.taxRepositoryProvider = taxRepositoryProvider;
  }

  @Override
  public InvoicesViewModel get() {
    return newInstance(invoiceRepositoryProvider.get(), businessRepositoryProvider.get(), customersRepositoryProvider.get(), taxRepositoryProvider.get());
  }

  public static InvoicesViewModel_Factory create(
      Provider<InvoiceRepository> invoiceRepositoryProvider,
      Provider<MyBusinessRepository> businessRepositoryProvider,
      Provider<CustomersRepository> customersRepositoryProvider,
      Provider<TaxRepository> taxRepositoryProvider) {
    return new InvoicesViewModel_Factory(invoiceRepositoryProvider, businessRepositoryProvider, customersRepositoryProvider, taxRepositoryProvider);
  }

  public static InvoicesViewModel newInstance(InvoiceRepository invoiceRepository,
      MyBusinessRepository businessRepository, CustomersRepository customersRepository,
      TaxRepository taxRepository) {
    return new InvoicesViewModel(invoiceRepository, businessRepository, customersRepository, taxRepository);
  }
}
